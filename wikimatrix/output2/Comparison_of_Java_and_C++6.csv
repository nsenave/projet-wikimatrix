"C++","Java"
"Extends  with  and . C code can most properly be used. Extends  with  and . C code can most properly be used. CExtends  with  and . C code can most properly be used. Extends  with  and . C code can most properly be used. Cobject-oriented programmingExtends  with  and . C code can most properly be used. Extends  with  and . C code can most properly be used. CExtends  with  and . C code can most properly be used. Extends  with  and . C code can most properly be used. Cobject-oriented programminggeneric programming","Strongly influenced by C++/C syntax."
"Compatible with  source code, except for a few . Compatible with  source code, except for a few . CCompatible with  source code, except for a few . Compatible with  source code, except for a few . Ccorner cases","Provides the  and recently  as a way to directly call C/C++ code. Provides the  and recently  as a way to directly call C/C++ code. Java Native InterfaceProvides the  and recently  as a way to directly call C/C++ code. Provides the  and recently  as a way to directly call C/C++ code. Java Native InterfaceJava Native Access"
"(WOCA).  (WOCA). Write once, compile anywhere","/everywhere (WORA/WORE). /everywhere (WORA/WORE). Write once, run anywhere"
"Allows , , , , and . Favors a mix of paradigms. Allows , , , , and . Favors a mix of paradigms. procedural programmingAllows , , , , and . Favors a mix of paradigms. Allows , , , , and . Favors a mix of paradigms. procedural programmingfunctional programmingAllows , , , , and . Favors a mix of paradigms. Allows , , , , and . Favors a mix of paradigms. procedural programmingAllows , , , , and . Favors a mix of paradigms. Allows , , , , and . Favors a mix of paradigms. procedural programmingfunctional programmingobject-oriented programmingAllows , , , , and . Favors a mix of paradigms. Allows , , , , and . Favors a mix of paradigms. procedural programmingAllows , , , , and . Favors a mix of paradigms. Allows , , , , and . Favors a mix of paradigms. procedural programmingfunctional programmingAllows , , , , and . Favors a mix of paradigms. Allows , , , , and . Favors a mix of paradigms. procedural programmingAllows , , , , and . Favors a mix of paradigms. Allows , , , , and . Favors a mix of paradigms. procedural programmingfunctional programmingobject-oriented programminggeneric programmingAllows , , , , and . Favors a mix of paradigms. Allows , , , , and . Favors a mix of paradigms. procedural programmingAllows , , , , and . Favors a mix of paradigms. Allows , , , , and . Favors a mix of paradigms. procedural programmingfunctional programmingAllows , , , , and . Favors a mix of paradigms. Allows , , , , and . Favors a mix of paradigms. procedural programmingAllows , , , , and . Favors a mix of paradigms. Allows , , , , and . Favors a mix of paradigms. procedural programmingfunctional programmingobject-oriented programmingAllows , , , , and . Favors a mix of paradigms. Allows , , , , and . Favors a mix of paradigms. procedural programmingAllows , , , , and . Favors a mix of paradigms. Allows , , , , and . Favors a mix of paradigms. procedural programmingfunctional programmingAllows , , , , and . Favors a mix of paradigms. Allows , , , , and . Favors a mix of paradigms. procedural programmingAllows , , , , and . Favors a mix of paradigms. Allows , , , , and . Favors a mix of paradigms. procedural programmingfunctional programmingobject-oriented programminggeneric programmingtemplate metaprogramming","Allows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . Allows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . procedural programmingAllows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . Allows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . procedural programmingfunctional programmingAllows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . Allows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . procedural programmingAllows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . Allows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . procedural programmingfunctional programminggeneric programmingAllows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . Allows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . procedural programmingAllows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . Allows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . procedural programmingfunctional programmingAllows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . Allows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . procedural programmingAllows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . Allows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . procedural programmingfunctional programminggeneric programmingobject-orientedAllows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . Allows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . procedural programmingAllows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . Allows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . procedural programmingfunctional programmingAllows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . Allows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . procedural programmingAllows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . Allows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . procedural programmingfunctional programminggeneric programmingAllows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . Allows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . procedural programmingAllows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . Allows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . procedural programmingfunctional programmingAllows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . Allows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . procedural programmingAllows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . Allows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . procedural programmingfunctional programminggeneric programmingobject-orientedprogramming paradigmAllows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . Allows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . procedural programmingAllows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . Allows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . procedural programmingfunctional programmingAllows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . Allows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . procedural programmingAllows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . Allows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . procedural programmingfunctional programminggeneric programmingAllows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . Allows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . procedural programmingAllows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . Allows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . procedural programmingfunctional programmingAllows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . Allows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . procedural programmingAllows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . Allows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . procedural programmingfunctional programminggeneric programmingobject-orientedAllows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . Allows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . procedural programmingAllows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . Allows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . procedural programmingfunctional programmingAllows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . Allows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . procedural programmingAllows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . Allows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . procedural programmingfunctional programminggeneric programmingAllows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . Allows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . procedural programmingAllows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . Allows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . procedural programmingfunctional programmingAllows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . Allows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . procedural programmingAllows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . Allows ,  (since Java 8) and  (since Java 5), but strongly encourages the  . Includes support for creating . procedural programmingfunctional programminggeneric programmingobject-orientedprogramming paradigmscripting languages"
"Runs as native executable machine code for the target (s). Runs as native executable machine code for the target (s). instruction set","Runs on a . Runs on a . virtual machine"
"Provides object types and type names. Allows reflection via  (RTTI). Provides object types and type names. Allows reflection via  (RTTI). run-time type information","Is , allowing metaprogramming and dynamic code generation at runtime. Is , allowing metaprogramming and dynamic code generation at runtime. reflective"
"Has multiple binary compatibility standards (commonly Microsoft (for MSVC compiler) and Itanium/GNU (for almost all other compilers)).","Has one binary compatibility standard,  for OS and compiler. Has one binary compatibility standard,  for OS and compiler. cross-platform"
"Optional automated  (e.g., the  method in  and  containers). Optional automated  (e.g., the  method in  and  containers). bounds checkingOptional automated  (e.g., the  method in  and  containers). Optional automated  (e.g., the  method in  and  containers). bounds checkingat()Optional automated  (e.g., the  method in  and  containers). Optional automated  (e.g., the  method in  and  containers). bounds checkingOptional automated  (e.g., the  method in  and  containers). Optional automated  (e.g., the  method in  and  containers). bounds checkingat()vectorOptional automated  (e.g., the  method in  and  containers). Optional automated  (e.g., the  method in  and  containers). bounds checkingOptional automated  (e.g., the  method in  and  containers). Optional automated  (e.g., the  method in  and  containers). bounds checkingat()Optional automated  (e.g., the  method in  and  containers). Optional automated  (e.g., the  method in  and  containers). bounds checkingOptional automated  (e.g., the  method in  and  containers). Optional automated  (e.g., the  method in  and  containers). bounds checkingat()vectorstring","All operations are required to be bound-checked by all compliant distributions of Java.  can remove bounds checking. All operations are required to be bound-checked by all compliant distributions of Java.  can remove bounds checking. HotSpot"
"Native  support. Native  support. unsigned arithmetic","Native unsigned arithmetic unsupported. Java 8 changes some of this, but aspects are unclear. Native unsigned arithmetic unsupported. Java 8 changes some of this, but aspects are unclear. [1]"
"Standardized minimum limits for all numerical types, but the actual sizes are implementation-defined. Standardized types are available via the standard library . Standardized minimum limits for all numerical types, but the actual sizes are implementation-defined. Standardized types are available via the standard library . <cstdint>","Standardized limits and sizes of all primitive types on all platforms."
"Pointers, references, and pass-by-value are supported for all types (primitive or user-defined).","All types (primitive types and reference types) are always passed by value. All types (primitive types and reference types) are always passed by value. [2]"
"can be done  via , automatically by scope, or by smart pointers. Supports deterministic destruction of objects.  ABI standardized in C++11, though compilers are not required to implement garbage collection.  can be done  via , automatically by scope, or by smart pointers. Supports deterministic destruction of objects.  ABI standardized in C++11, though compilers are not required to implement garbage collection. Memory management can be done  via , automatically by scope, or by smart pointers. Supports deterministic destruction of objects.  ABI standardized in C++11, though compilers are not required to implement garbage collection.  can be done  via , automatically by scope, or by smart pointers. Supports deterministic destruction of objects.  ABI standardized in C++11, though compilers are not required to implement garbage collection. Memory managementmanually can be done  via , automatically by scope, or by smart pointers. Supports deterministic destruction of objects.  ABI standardized in C++11, though compilers are not required to implement garbage collection.  can be done  via , automatically by scope, or by smart pointers. Supports deterministic destruction of objects.  ABI standardized in C++11, though compilers are not required to implement garbage collection. Memory management can be done  via , automatically by scope, or by smart pointers. Supports deterministic destruction of objects.  ABI standardized in C++11, though compilers are not required to implement garbage collection.  can be done  via , automatically by scope, or by smart pointers. Supports deterministic destruction of objects.  ABI standardized in C++11, though compilers are not required to implement garbage collection. Memory managementmanuallynew / delete can be done  via , automatically by scope, or by smart pointers. Supports deterministic destruction of objects.  ABI standardized in C++11, though compilers are not required to implement garbage collection.  can be done  via , automatically by scope, or by smart pointers. Supports deterministic destruction of objects.  ABI standardized in C++11, though compilers are not required to implement garbage collection. Memory management can be done  via , automatically by scope, or by smart pointers. Supports deterministic destruction of objects.  ABI standardized in C++11, though compilers are not required to implement garbage collection.  can be done  via , automatically by scope, or by smart pointers. Supports deterministic destruction of objects.  ABI standardized in C++11, though compilers are not required to implement garbage collection. Memory managementmanually can be done  via , automatically by scope, or by smart pointers. Supports deterministic destruction of objects.  ABI standardized in C++11, though compilers are not required to implement garbage collection.  can be done  via , automatically by scope, or by smart pointers. Supports deterministic destruction of objects.  ABI standardized in C++11, though compilers are not required to implement garbage collection. Memory management can be done  via , automatically by scope, or by smart pointers. Supports deterministic destruction of objects.  ABI standardized in C++11, though compilers are not required to implement garbage collection.  can be done  via , automatically by scope, or by smart pointers. Supports deterministic destruction of objects.  ABI standardized in C++11, though compilers are not required to implement garbage collection. Memory managementmanuallynew / deleteGarbage collection","Automatic . Supports a non-deterministic finalize() method use of which is not recommended. Automatic . Supports a non-deterministic finalize() method use of which is not recommended. garbage collectionAutomatic . Supports a non-deterministic finalize() method use of which is not recommended. Automatic . Supports a non-deterministic finalize() method use of which is not recommended. garbage collection[3]"
"can be done manually or by automatic lifetime-based resource management ().  can be done manually or by automatic lifetime-based resource management (). Resource management can be done manually or by automatic lifetime-based resource management ().  can be done manually or by automatic lifetime-based resource management (). Resource managementRAII","Resource management must generally be done manually, or automatically via finalizers, though this is generally discouraged. Has try-with-resources for automatic scope-based resource management (version 7 onwards).  Resource management must generally be done manually, or automatically via finalizers, though this is generally discouraged. Has try-with-resources for automatic scope-based resource management (version 7 onwards).  It can also be done using the internal API  but that usage is highly discouraged and will be replaced by a public API in an upcoming Java version. sun.misc.Unsafe"
"Supports classes, structs ( (PDS) types), and unions, and can allocate them on the  or the . Supports classes, structs ( (PDS) types), and unions, and can allocate them on the  or the . passive data structureSupports classes, structs ( (PDS) types), and unions, and can allocate them on the  or the . Supports classes, structs ( (PDS) types), and unions, and can allocate them on the  or the . passive data structureheapSupports classes, structs ( (PDS) types), and unions, and can allocate them on the  or the . Supports classes, structs ( (PDS) types), and unions, and can allocate them on the  or the . passive data structureSupports classes, structs ( (PDS) types), and unions, and can allocate them on the  or the . Supports classes, structs ( (PDS) types), and unions, and can allocate them on the  or the . passive data structureheapstack","Classes are allocated on the .  optimizes with  to allocate some objects on the . Classes are allocated on the .  optimizes with  to allocate some objects on the . heapClasses are allocated on the .  optimizes with  to allocate some objects on the . Classes are allocated on the .  optimizes with  to allocate some objects on the . heapJava SE 6Classes are allocated on the .  optimizes with  to allocate some objects on the . Classes are allocated on the .  optimizes with  to allocate some objects on the . heapClasses are allocated on the .  optimizes with  to allocate some objects on the . Classes are allocated on the .  optimizes with  to allocate some objects on the . heapJava SE 6escape analysisClasses are allocated on the .  optimizes with  to allocate some objects on the . Classes are allocated on the .  optimizes with  to allocate some objects on the . heapClasses are allocated on the .  optimizes with  to allocate some objects on the . Classes are allocated on the .  optimizes with  to allocate some objects on the . heapJava SE 6Classes are allocated on the .  optimizes with  to allocate some objects on the . Classes are allocated on the .  optimizes with  to allocate some objects on the . heapClasses are allocated on the .  optimizes with  to allocate some objects on the . Classes are allocated on the .  optimizes with  to allocate some objects on the . heapJava SE 6escape analysisstack"
"Allows explicitly overriding types, and some implicit narrowing conversions (for compatibility with C).","Rigid  except for widening conversions. Rigid  except for widening conversions. type safety"
"The  was designed to have a limited scope and functions, but includes language support, diagnostics, general utilities, strings, locales, containers, algorithms, , numerics, input/output, random number generators, regular expression parsing, threading facilities, type traits (for static type introspection) and Standard C Library. The  offers more functions including network I/O.  The  was designed to have a limited scope and functions, but includes language support, diagnostics, general utilities, strings, locales, containers, algorithms, , numerics, input/output, random number generators, regular expression parsing, threading facilities, type traits (for static type introspection) and Standard C Library. The  offers more functions including network I/O.  C++ Standard LibraryThe  was designed to have a limited scope and functions, but includes language support, diagnostics, general utilities, strings, locales, containers, algorithms, , numerics, input/output, random number generators, regular expression parsing, threading facilities, type traits (for static type introspection) and Standard C Library. The  offers more functions including network I/O.  The  was designed to have a limited scope and functions, but includes language support, diagnostics, general utilities, strings, locales, containers, algorithms, , numerics, input/output, random number generators, regular expression parsing, threading facilities, type traits (for static type introspection) and Standard C Library. The  offers more functions including network I/O.  C++ Standard LibraryiteratorsThe  was designed to have a limited scope and functions, but includes language support, diagnostics, general utilities, strings, locales, containers, algorithms, , numerics, input/output, random number generators, regular expression parsing, threading facilities, type traits (for static type introspection) and Standard C Library. The  offers more functions including network I/O.  The  was designed to have a limited scope and functions, but includes language support, diagnostics, general utilities, strings, locales, containers, algorithms, , numerics, input/output, random number generators, regular expression parsing, threading facilities, type traits (for static type introspection) and Standard C Library. The  offers more functions including network I/O.  C++ Standard LibraryThe  was designed to have a limited scope and functions, but includes language support, diagnostics, general utilities, strings, locales, containers, algorithms, , numerics, input/output, random number generators, regular expression parsing, threading facilities, type traits (for static type introspection) and Standard C Library. The  offers more functions including network I/O.  The  was designed to have a limited scope and functions, but includes language support, diagnostics, general utilities, strings, locales, containers, algorithms, , numerics, input/output, random number generators, regular expression parsing, threading facilities, type traits (for static type introspection) and Standard C Library. The  offers more functions including network I/O.  C++ Standard LibraryiteratorsBoost libraryThe  was designed to have a limited scope and functions, but includes language support, diagnostics, general utilities, strings, locales, containers, algorithms, , numerics, input/output, random number generators, regular expression parsing, threading facilities, type traits (for static type introspection) and Standard C Library. The  offers more functions including network I/O.  The  was designed to have a limited scope and functions, but includes language support, diagnostics, general utilities, strings, locales, containers, algorithms, , numerics, input/output, random number generators, regular expression parsing, threading facilities, type traits (for static type introspection) and Standard C Library. The  offers more functions including network I/O.  C++ Standard LibraryThe  was designed to have a limited scope and functions, but includes language support, diagnostics, general utilities, strings, locales, containers, algorithms, , numerics, input/output, random number generators, regular expression parsing, threading facilities, type traits (for static type introspection) and Standard C Library. The  offers more functions including network I/O.  The  was designed to have a limited scope and functions, but includes language support, diagnostics, general utilities, strings, locales, containers, algorithms, , numerics, input/output, random number generators, regular expression parsing, threading facilities, type traits (for static type introspection) and Standard C Library. The  offers more functions including network I/O.  C++ Standard LibraryiteratorsThe  was designed to have a limited scope and functions, but includes language support, diagnostics, general utilities, strings, locales, containers, algorithms, , numerics, input/output, random number generators, regular expression parsing, threading facilities, type traits (for static type introspection) and Standard C Library. The  offers more functions including network I/O.  The  was designed to have a limited scope and functions, but includes language support, diagnostics, general utilities, strings, locales, containers, algorithms, , numerics, input/output, random number generators, regular expression parsing, threading facilities, type traits (for static type introspection) and Standard C Library. The  offers more functions including network I/O.  C++ Standard LibraryThe  was designed to have a limited scope and functions, but includes language support, diagnostics, general utilities, strings, locales, containers, algorithms, , numerics, input/output, random number generators, regular expression parsing, threading facilities, type traits (for static type introspection) and Standard C Library. The  offers more functions including network I/O.  The  was designed to have a limited scope and functions, but includes language support, diagnostics, general utilities, strings, locales, containers, algorithms, , numerics, input/output, random number generators, regular expression parsing, threading facilities, type traits (for static type introspection) and Standard C Library. The  offers more functions including network I/O.  C++ Standard LibraryiteratorsBoost libraryA rich amount of third-party libraries exist for GUI and other functions like:  (ACE), , various   (IM) libraries, , , . Adaptive Communication Environment","The standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. The standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. XMLThe standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. The standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. XMLXSLTThe standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. The standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. XMLThe standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. The standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. XMLXSLTMIDIThe standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. The standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. XMLThe standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. The standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. XMLXSLTThe standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. The standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. XMLThe standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. The standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. XMLXSLTMIDILDAPThe standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. The standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. XMLThe standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. The standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. XMLXSLTThe standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. The standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. XMLThe standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. The standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. XMLXSLTMIDIThe standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. The standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. XMLThe standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. The standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. XMLXSLTThe standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. The standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. XMLThe standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. The standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. XMLXSLTMIDILDAPKerberosThe standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. The standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. XMLThe standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. The standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. XMLXSLTThe standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. The standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. XMLThe standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. The standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. XMLXSLTMIDIThe standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. The standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. XMLThe standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. The standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. XMLXSLTThe standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. The standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. XMLThe standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. The standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. XMLXSLTMIDILDAPThe standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. The standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. XMLThe standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. The standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. XMLXSLTThe standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. The standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. XMLThe standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. The standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. XMLXSLTMIDIThe standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. The standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. XMLThe standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. The standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. XMLXSLTThe standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. The standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. XMLThe standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. The standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for , , , database connectivity, naming services (e.g. ), cryptography, security services (e.g. ), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by  in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. XMLXSLTMIDILDAPKerberosJavaFX"
"for most operators. Preserving meaning (semantics) is highly recommended.  for most operators. Preserving meaning (semantics) is highly recommended. Operator overloading","Operators are not overridable. The language overrides + and += for the String class."
"Single and  of classes, including virtual inheritance. Single and  of classes, including virtual inheritance. multiple inheritance","Only supports single inheritance of classes."
"Compile-time templates. Allows for  meta-programming. Compile-time templates. Allows for  meta-programming. Turing complete","are used to achieve basic type-parametrization, but they do not translate from source code to byte code due to the use of  by the compiler.  are used to achieve basic type-parametrization, but they do not translate from source code to byte code due to the use of  by the compiler. Generics are used to achieve basic type-parametrization, but they do not translate from source code to byte code due to the use of  by the compiler.  are used to achieve basic type-parametrization, but they do not translate from source code to byte code due to the use of  by the compiler. Genericstype erasure"
"Function pointers, function objects, lambdas (in ), and interfaces. Function pointers, function objects, lambdas (in ), and interfaces. C++11","Functions references, function objects and lambdas were added in . Classes (and interfaces, which are classes) can be passed as references as well through  Functions references, function objects and lambdas were added in . Classes (and interfaces, which are classes) can be passed as references as well through  Java 8Functions references, function objects and lambdas were added in . Classes (and interfaces, which are classes) can be passed as references as well through  Functions references, function objects and lambdas were added in . Classes (and interfaces, which are classes) can be passed as references as well through  Java 8SomeClass.class"
"No standard inline documentation mechanism. Third-party software (e.g. ) exists. No standard inline documentation mechanism. Third-party software (e.g. ) exists. Doxygen","Extensive  documentation standard on all system classes and methods. Extensive  documentation standard on all system classes and methods. Javadoc"
"keyword for defining immutable variables and member functions that do not change the object. Const-ness is propagated as a means to enforce, at compile-time, correctness of the code with respect to mutability of objects (see ).  keyword for defining immutable variables and member functions that do not change the object. Const-ness is propagated as a means to enforce, at compile-time, correctness of the code with respect to mutability of objects (see ). const keyword for defining immutable variables and member functions that do not change the object. Const-ness is propagated as a means to enforce, at compile-time, correctness of the code with respect to mutability of objects (see ).  keyword for defining immutable variables and member functions that do not change the object. Const-ness is propagated as a means to enforce, at compile-time, correctness of the code with respect to mutability of objects (see ). constconst-correctness","provides a version of , equivalent to  pointers for objects and  for primitive types. Immutability of object members achieved via read-only interfaces and object encapsulation.  provides a version of , equivalent to  pointers for objects and  for primitive types. Immutability of object members achieved via read-only interfaces and object encapsulation. final provides a version of , equivalent to  pointers for objects and  for primitive types. Immutability of object members achieved via read-only interfaces and object encapsulation.  provides a version of , equivalent to  pointers for objects and  for primitive types. Immutability of object members achieved via read-only interfaces and object encapsulation. finalconst provides a version of , equivalent to  pointers for objects and  for primitive types. Immutability of object members achieved via read-only interfaces and object encapsulation.  provides a version of , equivalent to  pointers for objects and  for primitive types. Immutability of object members achieved via read-only interfaces and object encapsulation. final provides a version of , equivalent to  pointers for objects and  for primitive types. Immutability of object members achieved via read-only interfaces and object encapsulation.  provides a version of , equivalent to  pointers for objects and  for primitive types. Immutability of object members achieved via read-only interfaces and object encapsulation. finalconsttype* const provides a version of , equivalent to  pointers for objects and  for primitive types. Immutability of object members achieved via read-only interfaces and object encapsulation.  provides a version of , equivalent to  pointers for objects and  for primitive types. Immutability of object members achieved via read-only interfaces and object encapsulation. final provides a version of , equivalent to  pointers for objects and  for primitive types. Immutability of object members achieved via read-only interfaces and object encapsulation.  provides a version of , equivalent to  pointers for objects and  for primitive types. Immutability of object members achieved via read-only interfaces and object encapsulation. finalconst provides a version of , equivalent to  pointers for objects and  for primitive types. Immutability of object members achieved via read-only interfaces and object encapsulation.  provides a version of , equivalent to  pointers for objects and  for primitive types. Immutability of object members achieved via read-only interfaces and object encapsulation. final provides a version of , equivalent to  pointers for objects and  for primitive types. Immutability of object members achieved via read-only interfaces and object encapsulation.  provides a version of , equivalent to  pointers for objects and  for primitive types. Immutability of object members achieved via read-only interfaces and object encapsulation. finalconsttype* constconst"
"Supports the  statement. Supports the  statement. goto","Supports labels with loops and statement blocks.  is a reserved keyword but is marked as ""unused"" in the  Supports labels with loops and statement blocks.  is a reserved keyword but is marked as ""unused"" in the  gotoSupports labels with loops and statement blocks.  is a reserved keyword but is marked as ""unused"" in the  Supports labels with loops and statement blocks.  is a reserved keyword but is marked as ""unused"" in the  gotoJava specification."
"Source code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. Source code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. cross-platformSource code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. Source code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. cross-platformWindowsSource code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. Source code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. cross-platformSource code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. Source code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. cross-platformWindowsBSDSource code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. Source code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. cross-platformSource code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. Source code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. cross-platformWindowsSource code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. Source code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. cross-platformSource code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. Source code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. cross-platformWindowsBSDLinuxSource code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. Source code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. cross-platformSource code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. Source code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. cross-platformWindowsSource code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. Source code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. cross-platformSource code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. Source code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. cross-platformWindowsBSDSource code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. Source code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. cross-platformSource code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. Source code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. cross-platformWindowsSource code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. Source code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. cross-platformSource code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. Source code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. cross-platformWindowsBSDLinuxmacOSSource code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. Source code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. cross-platformSource code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. Source code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. cross-platformWindowsSource code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. Source code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. cross-platformSource code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. Source code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. cross-platformWindowsBSDSource code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. Source code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. cross-platformSource code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. Source code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. cross-platformWindowsSource code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. Source code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. cross-platformSource code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. Source code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. cross-platformWindowsBSDLinuxSource code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. Source code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. cross-platformSource code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. Source code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. cross-platformWindowsSource code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. Source code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. cross-platformSource code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. Source code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. cross-platformWindowsBSDSource code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. Source code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. cross-platformSource code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. Source code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. cross-platformWindowsSource code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. Source code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. cross-platformSource code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. Source code can be written to be  (can be compiled for , , , , , etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. cross-platformWindowsBSDLinuxmacOSSolaris","Compiled into byte code for the . Byte code is dependent on the Java platform, but is typically independent of  specific features. Compiled into byte code for the . Byte code is dependent on the Java platform, but is typically independent of  specific features. JVMCompiled into byte code for the . Byte code is dependent on the Java platform, but is typically independent of  specific features. Compiled into byte code for the . Byte code is dependent on the Java platform, but is typically independent of  specific features. JVMoperating system"
